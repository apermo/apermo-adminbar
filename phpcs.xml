<?xml version="1.0"?>
<ruleset name="WordPress Coding Standards">
    <description>Apply WordPress Coding Standards to all files</description>

    <!-- Only scan PHP files. -->
    <arg name="extensions" value="php"/>

    <!-- Whenever possible, cache the scan results and re-use those for unchanged files on the next scan. -->
    <arg name="cache"/>

    <!-- Strip the filepaths down to the relevant bit. -->
    <arg name="basepath" value="./"/>

    <!-- Check up to 20 files simultaneously. -->
    <arg name="parallel" value="20"/>

    <!-- Show sniff codes in all reports. -->
    <arg value="ps"/>

    <file>.</file>

    <rule ref="WordPress-Core"/>
    <rule ref="WordPress.CodeAnalysis.EmptyStatement"/>

    <!-- These rules are being set as warnings instead of errors, so we can error check the entire codebase. -->
    <rule ref="WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase">
        <type>warning</type>
    </rule>
    <rule ref="WordPress.DB.PreparedSQL.InterpolatedNotPrepared">
        <type>warning</type>
    </rule>
    <rule ref="WordPress.DB.PreparedSQL.NotPrepared">
        <type>warning</type>
    </rule>
    <rule ref="WordPress.Files.FileName.InvalidClassFileName">
        <type>warning</type>
    </rule>

    <rule ref="WordPress.NamingConventions.ValidVariableName">
        <properties>
            <property name="customPropertiesWhitelist" type="array">
                <!-- From database structure queries. -->
                <element value="Collation"/>
                <element value="Column_name"/>
                <element value="Default"/>
                <element value="Extra"/>
                <element value="Field"/>
                <element value="Index_type"/>
                <element value="Key"/>
                <element value="Key_name"/>
                <element value="Msg_text"/>
                <element value="Non_unique"/>
                <element value="Null"/>
                <element value="Sub_part"/>
                <element value="Type"/>
                <!-- From plugin/theme data. -->
                <element value="authorAndUri"/>
                <element value="Name"/>
                <element value="Version"/>
                <!-- From the result of wp_xmlrpc_server::wp_getPageList(). -->
                <element value="dateCreated"/>

                <!-- From DOMDocument. -->
                <element value="childNodes"/>
                <element value="formatOutput"/>
                <element value="nodeName"/>
                <element value="nodeType"/>
                <element value="parentNode"/>
                <element value="preserveWhiteSpace"/>
                <element value="textContent"/>
                <!-- From PHPMailer. -->
                <element value="AltBody"/>
                <element value="Body"/>
                <element value="CharSet"/>
                <element value="ContentType"/>
                <element value="Encoding"/>
                <element value="Hostname"/>
                <element value="mailHeader"/>
                <element value="MIMEBody"/>
                <element value="MIMEHeader"/>
                <element value="Sender"/>
                <element value="Subject"/>
                <!-- From PHPUnit_Util_Getopt. -->
                <element value="longOptions"/>
                <!-- From POP3. -->
                <element value="ERROR"/>
                <!-- From ZipArchive. -->
                <element value="numFiles"/>
            </property>
        </properties>
    </rule>

    <!-- Directories and third party library exclusions. -->
    <exclude-pattern>/node_modules/*</exclude-pattern>
    <exclude-pattern>/vendor/*</exclude-pattern>

    <exclude-pattern>/tests/phpunit/includes/phpunit7/MockObject/*</exclude-pattern>
    <exclude-pattern>/tests/phpunit/includes/speed-trap-listener\.php</exclude-pattern>

    <!-- Test data and fixtures. -->
    <exclude-pattern>/tests/phpunit/build*</exclude-pattern>
    <exclude-pattern>/tests/phpunit/data/*</exclude-pattern>

    <!-- Translator comments aren't needed in unit tests. -->
    <rule ref="WordPress.WP.I18n.MissingTranslatorsComment">
        <exclude-pattern>/tests/*</exclude-pattern>
    </rule>

    <!-- Exclude checking of line endings when reporting errors, but fix them when running phpcbf.
         Git and SVN manage these pretty well cross-platform as "native".
         Whitelist configuration files. -->
    <rule ref="Generic.Files.LineEndings">
        <exclude-pattern>/wp-config\.php</exclude-pattern>
        <exclude-pattern>/wp-config-sample\.php</exclude-pattern>
        <exclude phpcs-only="true" name="Generic.Files.LineEndings"/>
    </rule>

    <!-- Whitelist test classes for select sniffs. -->
    <rule ref="WordPress.Files.FileName">
        <properties>
            <property name="custom_test_class_whitelist" type="array">
                <!-- Test case parent classes. -->
                <element value="WP_UnitTestCase"/>
                <element value="WP_Ajax_UnitTestCase"/>
                <element value="WP_Canonical_UnitTestCase"/>
                <element value="WP_Test_REST_TestCase"/>
                <element value="WP_Test_REST_Controller_Testcase"/>
                <element value="WP_Test_REST_Post_Type_Controller_Testcase"/>
                <element value="WP_XMLRPC_UnitTestCase"/>
                <element value="WP_Filesystem_UnitTestCase"/>
                <element value="WP_Image_UnitTestCase"/>
                <element value="WP_HTTP_UnitTestCase"/>
                <element value="WP_Tests_Image_Resize_UnitTestCase"/>
                <element value="WP_Import_UnitTestCase"/>
                <element value="Tests_Query_Conditionals"/>
                <element value="WP_Test_XML_TestCase"/>

                <!-- Mock classes. -->
                <element value="Spy_REST_Server"/>
                <element value="WP_REST_Test_Controller"/>
                <element value="WP_Image_Editor_Mock"/>
                <element value="WP_Filesystem_MockFS"/>
                <element value="MockPHPMailer"/>
                <element value="MockAction"/>
                <element value="WP_Object_Cache"/>

                <!-- PHPUnit helpers. -->
                <element value="TracTickets"/>
                <element value="WP_PHPUnit_Util_Getopt"/>
                <element value="PHPUnit_Util_Test"/>
                <element value="WPProfiler"/>
                <element value="SpeedTrapListener"/>
                <element value="PHPUnit_Framework_Exception"/>
            </property>
        </properties>
    </rule>

    <rule ref="WordPress.PHP.NoSilencedErrors">
        <properties>
            <property name="custom_whitelist" type="array">
                <element value="ssh2_connect"/>
                <element value="ssh2_auth_password"/>
                <element value="ssh2_auth_pubkey_file"/>
                <element value="ftp_ssl_connect"/>
                <element value="ftp_connect"/>
                <element value="ftp_get_option"/>
                <element value="ftp_set_option"/>
                <element value="disk_free_space"/>
                <element value="getimagesize"/>
                <element value="iptcparse"/>
                <element value="exif_read_data"/>
                <element value="gzinflate"/>
                <element value="gzuncompress"/>
                <element value="gzdecode"/>
            </property>
        </properties>
    </rule>

    <!-- Enforce no parenthesis for language constructs, and only one space immediately after.
         Including this rule is temporary until it is moved from the WordPress-Extra ruleset to
         the WordPress-Core ruleset upstream.
    -->
    <rule ref="PEAR.Files.IncludingFile.BracketsNotRequired">
        <type>warning</type>
    </rule>
    <rule ref="PEAR.Files.IncludingFile.UseRequire">
        <type>warning</type>
    </rule>
    <rule ref="PEAR.Files.IncludingFile.UseRequireOnce">
        <type>warning</type>
    </rule>
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

    <!-- Assignments in while conditions are a valid method of looping over iterables. -->
    <rule ref="WordPress.CodeAnalysis.AssignmentInCondition.FoundInWhileCondition">
        <exclude-pattern>*</exclude-pattern>
    </rule>

    <!-- Verify that no WP functions are used which are deprecated or have been removed.
         The minimum version set here should be in line with the minimum WP version
         as set in the "Requires at least" tag in the readme.txt file.
    -->
    <rule ref="WordPress.WP.DeprecatedFunctions">
        <properties>
            <property name="minimum_supported_version" value="5.3"/>
        </properties>
    </rule>

    <!-- Include sniffs for PHP cross-version compatibility. -->
    <config name="testVersion" value="5.6-"/>
    <rule ref="PHPCompatibility"/>
</ruleset>
